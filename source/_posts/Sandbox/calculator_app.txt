
When a number button is clicked, it will look for a "number_Click" method in MainWindow.xaml.cs

The "sender" object will equal the name of the number button clicked

For example, if the number clicked is "1", "sender" will equal "one" and method will set the value of "selectedValue" equal to 1

```
private void number_Click(object sender, RoutedEventArgs e)
{

    int selectedValue = 0;

    if (sender == zero)
        selectedValue = 0;

    // If the number clicked is "1", "sender" will equal "one" 
    if (sender == one)
        
        //The integer variable "selectedValue" will be set to 1
        selectedValue = 1;


    if (sender == two)
        selectedValue = 2;
    if (sender == three)
        selectedValue = 3;
    if (sender == four)
        selectedValue = 4;
    if (sender == five)
        selectedValue = 5;
    if (sender == six)
        selectedValue = 6;
    if (sender == seven)
        selectedValue = 7;
    if (sender == eight)
        selectedValue = 8;
    if (sender == nine)
        selectedValue = 9;

    //If the "resultLabel" has not been set to any value already, set the value to the "selectedValue"
    if (resultLabel.Content.ToString() == "0")
    {
        resultLabel.Content = $"{selectedValue}";
    }
    //Otherwise append the "selectedValue" to the existing number
    else
    {
        resultLabel.Content = $"{resultLabel.Content}{selectedValue}";
    }

    //Note: Anytime this method is called, the "selectedValue" will be set to 0. So, for example, if you typed 7 and then clicked + and then typed 77, the "selectedValue" would equal 0 before you clicked 7 and then 0 again before you clicked 77 

}

```


Create an action "Click="Operation_Button"" for each operation buttons in MainWindow.xaml

```
<Button x:Name = "divide"
        Click="Operation_Button"
        Content="/"
        Margin="5"
        Grid.Row="1"
        Grid.Column="3"/>

<Button x:Name ="plus"
        Click="Operation_Button"
        Content="+"
        Margin="5"
        Grid.Row="4"
        Grid.Column="3"/>

<Button x:Name ="times"
        Click="Operation_Button"
        Content="*"
        Margin="5"
        Grid.Row="2"
        Grid.Column="3"/>

<Button x:Name ="subtract"
        Click="Operation_Button"
        Content="-"
        Margin="5"
        Grid.Row="3"
        Grid.Column="3"/>

```


When an operation button is clicked, it will look for a "Operation_Button" method in MainWindow.xaml.cs

The "sender" object will equal the name of the operation button clicked

```
    private void Operation_Button(object sender, RoutedEventArgs e)
    {

    }
```

Before you populate anything in this method, we should create an enumerator outside of the MainWindow class

Use an enumerator when you want to define a type that can only have specified values; e.g.,  Addition, Subtraction, Multiplication, and Division 

```
    public enum SelectedOperator
    {
        Addition,
        Subtraction,
        Multiplication,
        Division
    }
```

Now define "selectedOperator" in the MainWindow class

Notice that "selectedOperator" has the type "SelectedOperator"

This is the type we defined when we created the enumerator above

```
    public partial class MainWindow : Window
    {
        double lastNumber, result;
        SelectedOperator selectedOperator;
        ...

```

Your entire script should now look as follows: 

```
using System.Windows;

namespace Calculator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        double lastNumber, result;
        SelectedOperator selectedOperator;

        public MainWindow()
        {

            InitializeComponent();

            AcButton.Click += AcButton_Click;
            plusNegative.Click += PlusNegative_Click;
            percent.Click += Percent_Click;
            equal.Click += Equal_Click;

        }


        private void Equal_Click(object sender, RoutedEventArgs e)
        {
            //TODO: Equal_Click logic
        }

        private void Percent_Click(object sender, RoutedEventArgs e)
        {

            double tempNumber;
            if (double.TryParse(resultLabel.Content.ToString(), out tempNumber))
            {
                tempNumber = (tempNumber / 100);
                if (lastNumber != 0)
                    tempNumber *= lastNumber;

                resultLabel.Content = tempNumber.ToString();

            }
        }

        private void PlusNegative_Click(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
            {
                lastNumber = lastNumber * -1;
                resultLabel.Content = lastNumber.ToString();
            }
        }

        private void AcButton_Click(object sender, RoutedEventArgs e)
        {
            resultLabel.Content = "0";
            result = 0;
            lastNumber = 0;
        }

        private void number_Click(object sender, RoutedEventArgs e)
        {

            int selectedValue = 0;

            if (sender == zero)
                selectedValue = 0;
            if (sender == one)
                selectedValue = 1;
            if (sender == two)
                selectedValue = 2;
            if (sender == three)
                selectedValue = 3;
            if (sender == four)
                selectedValue = 4;
            if (sender == five)
                selectedValue = 5;
            if (sender == six)
                selectedValue = 6;
            if (sender == seven)
                selectedValue = 7;
            if (sender == eight)
                selectedValue = 8;
            if (sender == nine)
                selectedValue = 9;

            if (resultLabel.Content.ToString() == "0")
            {
                resultLabel.Content = $"{selectedValue}";
            }
            else
            {
                resultLabel.Content = $"{resultLabel.Content}{selectedValue}";
            }
        }

        private void Operation_Button(object sender, RoutedEventArgs e)
        {
            //TODO: Operation_Button logic
        }

    }

    public enum SelectedOperator
    {
        Addition,
        Subtraction,
        Multiplication,
        Division
    }
}

```

Now we can define our Operation_Button method 

```
    private void Operation_Button(object sender, RoutedEventArgs e)
    {
        //whenever you click an operation buttion, the previous number should be saved to "lastNumber"
        if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
        {
            //If the previous number in the calculator can be converted to a number
            //then assign the calculator value to "0"
            resultLabel.Content = "0";
        }

        //If the user clicks the multiplication button, "sender" will equal the name of the multiplication buttion, "times"  
        if (sender == times)
            //Assign the Enum "Multiplication" value to the "selectedOperator"
            //Remember that "SelectedOperator" is the data type and "Multiplication" is the value 
            selectedOperator = SelectedOperator.Multiplication;
        if (sender == divide)
            selectedOperator = SelectedOperator.Division;
        if (sender == plus)
            selectedOperator = SelectedOperator.Addition;
        if (sender == subtract)
            selectedOperator = SelectedOperator.Subtraction;
    }
```

Now you can code the "Equal_Click" method

```
    private void Equal_Click(object sender, RoutedEventArgs e)
    {
        //The calculation will be performed between the "lastNumber" and a new number
        //Define a variable called "newNumber" 
        double newNumber;

        //If the contents of the resultLable can be converted to a number, assign this number to "newNumber"
        if (double.TryParse(resultLabel.Content.ToString(), out newNumber))
        {
            //The value of "selectedOperator", defined in Operation_Button method, will determine which case statement gets executed 
            switch (selectedOperator)
            {
                //If "selectedOperator" equals "SelectedOperator.Addition"
                case SelectedOperator.Addition:
                    //TODO: Define a public class to define simple math operations. 
                    break;
                case SelectedOperator.Subtraction:
                    //TODO: Define a public class to define simple math operations. 
                    break;
                case SelectedOperator.Multiplication:
                    //TODO: Define a public class to define simple math operations. 
                    break;
                case SelectedOperator.Division:
                    //TODO: Define a public class to define simple math operations. 
                    break;
            }

            resultLabel.Content = result.ToString();
        }
    }
```

Now we can create a new class to take care of simple math operations 

Let's call this class "SimpleMath" 

```
 public class SimpleMath
    {
        //Public static method adds two numbers and returns the value 
        //The methods are defined as "public static", so they can be accessed outside the class by calling the name of the class followed by the name of the method; e.g. "SimpleMath.Add(n1,n2)"
        public static double Add(double n1, double n2)
        {
            return n1 + n2;
        }
        //Public static method subtracts two numbers and returns the value
        public static double Subtract(double n1, double n2)
        {
            return n1 - n2;
        }
        //Public static method multiplies two numbers and returns the value
        public static double Multiply(double n1, double n2)
        {
            return n1*n2;
        }
        //Public static method divides two numbers and returns the value 
        public static double Divide(double n1, double n2)
        {
            //If the second number is zero, return a "Division by 0" error message
            if (n2 == 0)
            {
                MessageBox.Show("Division by 0 is not supported", "Wrong operation", MessageBoxButton.OK, MessageBoxImage.Error);
                return 0;
            }
            return n1/n2;
        }
    }
```

Note: The access modifier must be "public" so that the static method can be access outside the class 

Now return to the MainWindow class and complete the "TODOs" of the "Equal_Click" method

```
    private void Equal_Click(object sender, RoutedEventArgs e)
    {
        double newNumber;
        if (double.TryParse(resultLabel.Content.ToString(), out newNumber))
        {
            switch (selectedOperator)
            {
                case SelectedOperator.Addition:
                    //This "SimpleMath.Add" method accepts two numbers, execute the addition in the "SimpleMath" class "Add" method, and assigns the result to a variable called "result"  
                    result = SimpleMath.Add(lastNumber, newNumber);
                    break;
                case SelectedOperator.Subtraction:
                    result = SimpleMath.Subtract(lastNumber, newNumber);
                    break;
                case SelectedOperator.Multiplication:
                    result = SimpleMath.Multiply(lastNumber, newNumber);
                    break;
                case SelectedOperator.Division:
                    result = SimpleMath.Divide(lastNumber, newNumber);
                    break;
            }
            //This changes "result" to a string value and assigns the value to "resultLabel.Content" so that the number appers in the calculator output window 
            resultLabel.Content = result.ToString();
        }
    }
```

Your entire code should now look as follows 

```
using System.Windows;

namespace Calculator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        double lastNumber, result;
        SelectedOperator selectedOperator;

        public MainWindow()
        {

            InitializeComponent();

            AcButton.Click += AcButton_Click;
            plusNegative.Click += PlusNegative_Click;
            percent.Click += Percent_Click;
            equal.Click += Equal_Click;

        }

        private void Equal_Click(object sender, RoutedEventArgs e)
        {
            double newNumber;
            if (double.TryParse(resultLabel.Content.ToString(), out newNumber))
            {
                switch (selectedOperator)
                {
                    case SelectedOperator.Addition:
                        result = SimpleMath.Add(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Subtraction:
                        result = SimpleMath.Subtract(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Multiplication:
                        result = SimpleMath.Multiply(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Division:
                        result = SimpleMath.Divide(lastNumber, newNumber);
                        break;
                }

                resultLabel.Content = result.ToString();
            }
        }

        private void Percent_Click(object sender, RoutedEventArgs e)
        {

            double tempNumber;
            if (double.TryParse(resultLabel.Content.ToString(), out tempNumber))
            {
                tempNumber = (tempNumber / 100);
                if (lastNumber != 0)
                    tempNumber *= lastNumber;

                resultLabel.Content = tempNumber.ToString();

            }
        }

        private void PlusNegative_Click(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
            {
                lastNumber = lastNumber * -1;
                resultLabel.Content = lastNumber.ToString();
            }
        }

        private void AcButton_Click(object sender, RoutedEventArgs e)
        {
            resultLabel.Content = "0";
            result = 0;
            lastNumber = 0;
        }

        private void Operation_Button(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
            {
                resultLabel.Content = "0";
            }
            if (sender == times)
                selectedOperator = SelectedOperator.Multiplication;
            if (sender == divide)
                selectedOperator = SelectedOperator.Division;
            if (sender == plus)
                selectedOperator = SelectedOperator.Addition;
            if (sender == subtract)
                selectedOperator = SelectedOperator.Subtraction;
        
        }

        private void number_Click(object sender, RoutedEventArgs e)
        {

            int selectedValue = 0;

            if (sender == zero)
                selectedValue = 0;
            if (sender == one)
                selectedValue = 1;
            if (sender == two)
                selectedValue = 2;
            if (sender == three)
                selectedValue = 3;
            if (sender == four)
                selectedValue = 4;
            if (sender == five)
                selectedValue = 5;
            if (sender == six)
                selectedValue = 6;
            if (sender == seven)
                selectedValue = 7;
            if (sender == eight)
                selectedValue = 8;
            if (sender == nine)
                selectedValue = 9;


            if (resultLabel.Content.ToString() == "0")
            {
                resultLabel.Content = $"{selectedValue}";
            }
            else
            {
                resultLabel.Content = $"{resultLabel.Content}{selectedValue}";
            }
        }
    }

    public enum SelectedOperator
    {
        Addition,
        Subtraction,
        Multiplication,
        Division
    }
    
    public class SimpleMath
    {
        public static double Add(double n1, double n2)
        {
            return n1 + n2;
        }
        public static double Subtract(double n1, double n2)
        {
            return n1 - n2;
        }
        public static double Multiply(double n1, double n2)
        {
            return n1*n2;
        }
        public static double Divide(double n1, double n2)
        {
            if (n2 == 0)
            {
                MessageBox.Show("Division by 0 is not supported", "Wrong operation", MessageBoxButton.OK, MessageBoxImage.Error);
                return 0;
            }
            return n1/n2;
        }
    }
}

```

Now we need only one more event handler for the . button

In the MainWindow.xaml window find the button named "dot"

```
    <Button x:Name ="dot" 
            Click="dot_Click"
            Content="."
            Margin="5"
            Grid.Row="5"
            Grid.Column="2"/>
```

Go to the MainWindow.xaml.cs window and create another event handler 

```
  private void dot_Click(object sender, RoutedEventArgs e)
  {
      //If the calculator output already contains a ".", do nothing
      if (resultLabel.Content.ToString().Contains("."))
      { 
          //Do Nothing 
      }
      else
      {
          //Otherwise, append "." to the existing output string 
          resultLabel.Content = $"{resultLabel.Content}.";
      }
  }
```

That's it!

You MainWindow.xaml code should look as follows
```
<Window x:Class="Calculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Calculator"
        mc:Ignorable="d"
        Title="MainWindow" Height="800" Width="450">
    <Grid Margin="10" >

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <Label x:Name = "resultLabel"
               Content="0"
               HorizontalAlignment="Right"
               VerticalAlignment="Bottom"
               FontSize="60"
               Grid.ColumnSpan = "4"/>

        <Button x:Name ="AcButton" 
                Content="AC"
                Margin="5"
                Grid.Row="1"
                Grid.Column="0"/>

        <Button x:Name ="plusNegative"
                Content="+/-"
                Margin="5"
                Grid.Row="1"
                Grid.Column="1"/>

        <Button x:Name ="percent" 
                Content="%"
                Margin="5"
                Grid.Row="1"
                Grid.Column="2"/>

        <Button x:Name = "divide"
                Click="Operation_Button"
                Content="/"
                Margin="5"
                Grid.Row="1"
                Grid.Column="3"/>

        <Button x:Name ="plus"
                Click="Operation_Button"
                Content="+"
                Margin="5"
                Grid.Row="4"
                Grid.Column="3"/>

        <Button x:Name ="times"
                Click="Operation_Button"
                Content="*"
                Margin="5"
                Grid.Row="2"
                Grid.Column="3"/>

        <Button x:Name ="subtract"
                Click="Operation_Button"
                Content="-"
                Margin="5"
                Grid.Row="3"
                Grid.Column="3"/>

        <Button x:Name ="dot" 
                Click="dot_Click"
                Content="."
                Margin="5"
                Grid.Row="5"
                Grid.Column="2"/>

        <Button x:Name ="equal"
                Content="="
                Margin="5"
                Grid.Row="5"
                Grid.Column="4"/>


        <Button x:Name ="seven"
                Click="number_Click"
                Content="7"
                Margin="5"
                Grid.Row="2"
                Grid.Column="0"/>

        <Button x:Name = "eight"
                Click="number_Click"
                Content="8"
                Margin="5"
                Grid.Row="2"
                Grid.Column="1"/>

        <Button x:Name ="nine" 
                Click="number_Click"
                Content="9"
                Margin="5"
                Grid.Row="2"
                Grid.Column="2"/>

        <Button x:Name = "four"
                Click="number_Click"
                Content="4"
                Margin="5"
                Grid.Row="3"
                Grid.Column="0"/>

        <Button x:Name ="five"
                Click="number_Click"
                Content="5"
                Margin="6"
                Grid.Row="3"
                Grid.Column="1"/>

        <Button x:Name ="six"
                Click="number_Click"
                Content="6"
                Margin="5"
                Grid.Row="3"
                Grid.Column="2"/>

        <Button x:Name ="one"
                Click="number_Click"
                Content="1"
                Margin="5"
                Grid.Row="4"
                Grid.Column="0"/>

        <Button x:Name ="two"
                Click="number_Click"
                Content="2"
                Margin="5"
                Grid.Row="4"
                Grid.Column="1"/>

        <Button x:Name ="three"
                Click="number_Click"
                Content="3"
                Margin="5"
                Grid.Row="4"
                Grid.Column="2"/>

        <Button x:Name ="zero"
                Click="number_Click"
                Content="0"
                Margin="5"
                Grid.Row="5"
                Grid.ColumnSpan="2"/>

    </Grid>
</Window>

```

Your MainWindow.xaml.cs code should look as follows

```
using System.Windows;

namespace Calculator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        double lastNumber, result;
        SelectedOperator selectedOperator;

        public MainWindow()
        {

            InitializeComponent();

            AcButton.Click += AcButton_Click;
            plusNegative.Click += PlusNegative_Click;
            percent.Click += Percent_Click;
            equal.Click += Equal_Click;

        }

        private void Equal_Click(object sender, RoutedEventArgs e)
        {
            double newNumber;
            if (double.TryParse(resultLabel.Content.ToString(), out newNumber))
            {
                switch (selectedOperator)
                {
                    case SelectedOperator.Addition:
                        result = SimpleMath.Add(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Subtraction:
                        result = SimpleMath.Subtract(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Multiplication:
                        result = SimpleMath.Multiply(lastNumber, newNumber);
                        break;
                    case SelectedOperator.Division:
                        result = SimpleMath.Divide(lastNumber, newNumber);
                        break;
                }

                resultLabel.Content = result.ToString();
            }
        }

        private void Percent_Click(object sender, RoutedEventArgs e)
        {

            double tempNumber;
            if (double.TryParse(resultLabel.Content.ToString(), out tempNumber))
            {
                tempNumber = (tempNumber / 100);
                if (lastNumber != 0)
                    tempNumber *= lastNumber;

                resultLabel.Content = tempNumber.ToString();

            }
        }

        private void PlusNegative_Click(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
            {
                lastNumber = lastNumber * -1;
                resultLabel.Content = lastNumber.ToString();
            }
        }

        private void AcButton_Click(object sender, RoutedEventArgs e)
        {
            resultLabel.Content = "0";
            result = 0;
            lastNumber = 0;
        }

        private void Operation_Button(object sender, RoutedEventArgs e)
        {
            if (double.TryParse(resultLabel.Content.ToString(), out lastNumber))
            {
                resultLabel.Content = "0";
            }
            if (sender == times)
                selectedOperator = SelectedOperator.Multiplication;
            if (sender == divide)
                selectedOperator = SelectedOperator.Division;
            if (sender == plus)
                selectedOperator = SelectedOperator.Addition;
            if (sender == subtract)
                selectedOperator = SelectedOperator.Subtraction;
        
        }

        private void dot_Click(object sender, RoutedEventArgs e)
        {
            if (resultLabel.Content.ToString().Contains("."))
            { 
                //DO nothing 
            }
            else
            {
                resultLabel.Content = $"{resultLabel.Content}.";
            }
        }

        private void number_Click(object sender, RoutedEventArgs e)
        {

            int selectedValue = 0;

            if (sender == zero)
                selectedValue = 0;
            if (sender == one)
                selectedValue = 1;
            if (sender == two)
                selectedValue = 2;
            if (sender == three)
                selectedValue = 3;
            if (sender == four)
                selectedValue = 4;
            if (sender == five)
                selectedValue = 5;
            if (sender == six)
                selectedValue = 6;
            if (sender == seven)
                selectedValue = 7;
            if (sender == eight)
                selectedValue = 8;
            if (sender == nine)
                selectedValue = 9;


            if (resultLabel.Content.ToString() == "0")
            {
                resultLabel.Content = $"{selectedValue}";
            }
            else
            {
                resultLabel.Content = $"{resultLabel.Content}{selectedValue}";
            }
        }
    }

    public enum SelectedOperator
    {
        Addition,
        Subtraction,
        Multiplication,
        Division
    }
    
    public class SimpleMath
    {
        public static double Add(double n1, double n2)
        {
            return n1 + n2;
        }
        public static double Subtract(double n1, double n2)
        {
            return n1 - n2;
        }
        public static double Multiply(double n1, double n2)
        {
            return n1*n2;
        }
        public static double Divide(double n1, double n2)
        {
            if (n2 == 0)
            {
                MessageBox.Show("Division by 0 is not supported", "Wrong operation", MessageBoxButton.OK, MessageBoxImage.Error);
                return 0;
            }
            return n1/n2;
        }
    }
}

```

Now test your app by clicking the start button 

//Image of start button here 




<h4><a id="XAML"> XAML </a></h4>
<h4><a id="EventHandlers"> Event Handlers </a></h4>
<h4><a id="Methods"> Methods </a></h4>
<h4><a id="Types"> Types </a></h4>
<h4><a id="MessageBox"> Message Box </a></h4>



